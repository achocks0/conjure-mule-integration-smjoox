version: '3.8'

services:
  # Payment API Services
  payment-eapi:
    image: payment-eapi:latest
    build:
      context: ../src/backend
      dockerfile: Dockerfile-eapi
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CONJUR_URL=http://conjur:80
      - CONJUR_ACCOUNT=payment-system
      - CONJUR_AUTHN_LOGIN=payment-eapi-service
      - CONJUR_AUTHN_API_KEY=${CONJUR_EAPI_API_KEY}
      - PAYMENT_SAPI_URL=http://payment-sapi:8081
      - LOG_LEVEL=INFO
      - TOKEN_SIGNING_KEY_PATH=/run/secrets/jwt-signing-key
    volumes:
      - ../src/backend/payment-eapi/src/main/resources/application-prod.yml:/app/config/application.yml
      - ./logs/payment-eapi:/var/log/payment-eapi
    secrets:
      - jwt-signing-key
    depends_on:
      redis:
        condition: service_healthy
      conjur:
        condition: service_healthy
      payment-sapi:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - payment-network

  payment-sapi:
    image: payment-sapi:latest
    build:
      context: ../src/backend
      dockerfile: Dockerfile-sapi
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=payment
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - TOKEN_VERIFICATION_KEY_PATH=/run/secrets/jwt-verification-key
      - LOG_LEVEL=INFO
    volumes:
      - ../src/backend/payment-sapi/src/main/resources/application-prod.yml:/app/config/application.yml
      - ./logs/payment-sapi:/var/log/payment-sapi
    secrets:
      - jwt-verification-key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/internal/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - payment-network

  credential-rotation:
    image: credential-rotation:latest
    build:
      context: ../src/backend
      dockerfile: Dockerfile-rotation
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=rotation
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CONJUR_URL=http://conjur:80
      - CONJUR_ACCOUNT=payment-system
      - CONJUR_AUTHN_LOGIN=rotation-service-host
      - CONJUR_AUTHN_API_KEY=${CONJUR_ROTATION_API_KEY}
      - AUTO_ROTATION_ENABLED=false
      - NOTIFICATION_ENDPOINT=http://payment-eapi:8080/api/notifications
      - LOG_LEVEL=INFO
    volumes:
      - ../src/backend/credential-rotation/src/main/resources/application-prod.yml:/app/config/application.yml
      - ./logs/credential-rotation:/var/log/credential-rotation
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      conjur:
        condition: service_healthy
      payment-eapi:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/rotation/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - payment-network

  monitoring:
    image: payment-monitoring:latest
    build:
      context: ../src/backend
      dockerfile: Dockerfile-monitoring
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - MONITORING_DB_URL=jdbc:postgresql://postgres:5432/monitoring
      - MONITORING_DB_USERNAME=${DB_USERNAME}
      - MONITORING_DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PAYMENT_EAPI_URL=http://payment-eapi:8080
      - PAYMENT_SAPI_URL=http://payment-sapi:8081
      - CONJUR_VAULT_URL=http://conjur:80
      - LOG_LEVEL=INFO
    volumes:
      - ../src/backend/monitoring/src/main/resources/application-prod.yml:/app/config/application.yml
      - ../src/backend/monitoring/src/main/resources/alerts.yml:/app/config/alerts.yml
      - ./logs/monitoring:/var/log/monitoring
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      payment-eapi:
        condition: service_healthy
      payment-sapi:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/api/monitoring/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - payment-network

  # Infrastructure Services
  postgres:
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - payment-network

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - payment-network

  conjur:
    image: cyberark/conjur:latest
    ports:
      - "80:80"
    environment:
      - CONJUR_ACCOUNT=payment-system
      - CONJUR_DATA_KEY=${CONJUR_DATA_KEY}
      - CONJUR_AUTHENTICATORS=authn
      - CONJUR_LOG_LEVEL=INFO
      - CONJUR_ADMIN_PASSWORD=${CONJUR_ADMIN_PASSWORD}
    volumes:
      - conjur-data:/opt/conjur/data
      - ./conjur/policy:/opt/conjur/policy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - payment-network

  nginx:
    image: nginx:1.21-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/auth:/etc/nginx/auth:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      payment-eapi:
        condition: service_healthy
      grafana:
        condition: service_started
      kibana:
        condition: service_started
      prometheus:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - payment-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.30.3
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      alertmanager:
        condition: service_started
      node-exporter:
        condition: service_started
      cadvisor:
        condition: service_started
      redis-exporter:
        condition: service_started
      postgres-exporter:
        condition: service_started
    restart: unless-stopped
    networks:
      - payment-network
      - monitoring-network

  alertmanager:
    image: prom/alertmanager:v0.23.0
    ports:
      - "9093:9093"
    volumes:
      - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    networks:
      - monitoring-network

  grafana:
    image: grafana/grafana:8.3.3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - monitoring-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.monitoring.collection.enabled=true
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - monitoring-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  logstash:
    image: docker.elastic.co/logstash/logstash:7.16.3
    ports:
      - "5044:5044"
      - "5000:5000"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ENVIRONMENT=production
    volumes:
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./elk/logstash/patterns:/etc/logstash/patterns:ro
      - ./elk/logstash/certs:/etc/logstash/certs:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - monitoring-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.3
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - monitoring-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.16.3
    volumes:
      - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/services:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root
    depends_on:
      logstash:
        condition: service_started
    restart: unless-stopped
    networks:
      - monitoring-network

  # Exporters for Prometheus
  node-exporter:
    image: prom/node-exporter:v1.3.1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.44.0
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: unless-stopped
    networks:
      - monitoring-network

  redis-exporter:
    image: oliver006/redis_exporter:v1.32.0
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - payment-network
      - monitoring-network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.10.0
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - payment-network
      - monitoring-network

volumes:
  postgres-data:
  redis-data:
  conjur-data:
  prometheus-data:
  alertmanager-data:
  grafana-data:
  elasticsearch-data:

networks:
  payment-network:
    driver: bridge
  monitoring-network:
    driver: bridge

secrets:
  jwt-signing-key:
    file: ./secrets/jwt-signing-key.pem
  jwt-verification-key:
    file: ./secrets/jwt-verification-key.pem