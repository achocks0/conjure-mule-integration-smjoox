spring:
  application:
    name: payment-monitoring-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  jpa:
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  mail:
    host: ${MAIL_HOST:smtp.example.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:notification@example.com}
    password: ${MAIL_PASSWORD:password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

server:
  port: ${SERVER_PORT:8084}
  servlet:
    context-path: /api/monitoring
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: never
    include-exception: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      roles: MONITORING_ADMIN
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: [0.5, 0.9, 0.95, 0.99]
    tags:
      application: ${spring.application.name}

monitoring:
  enabled: true
  metrics-retention-days: 30
  connection-timeout: 5000
  read-timeout: 10000
  scheduled-checks:
    enabled: true
    cron: 0 */15 * * * *
  notification-channels:
    pagerduty:
      enabled: ${PAGERDUTY_ENABLED:false}
      severity-levels:
        - CRITICAL
      service-key: ${PAGERDUTY_SERVICE_KEY:}
      response-times:
        security: 15m
        performance: 30m
        availability: 15m
    email:
      enabled: ${EMAIL_ENABLED:true}
      severity-levels:
        - CRITICAL
        - HIGH
      recipients:
        - ${SECURITY_TEAM_EMAIL:security-team@example.com}
        - ${OPERATIONS_TEAM_EMAIL:operations-team@example.com}
      response-times:
        security:
          critical: 15m
          high: 1h
        performance:
          critical: 30m
          high: 2h
        availability:
          critical: 15m
          high: 1h
    slack:
      enabled: ${SLACK_ENABLED:true}
      severity-levels:
        - CRITICAL
        - HIGH
        - MEDIUM
        - LOW
      webhook-url: ${SLACK_WEBHOOK_URL:}
      channels:
        security: '#security-alerts'
        performance: '#performance-alerts'
        availability: '#availability-alerts'
  services:
    payment-eapi:
      url: ${PAYMENT_EAPI_URL:http://localhost:8080}
      health-check-path: /actuator/health
      metrics-path: /actuator/prometheus
    payment-sapi:
      url: ${PAYMENT_SAPI_URL:http://localhost:8081}
      health-check-path: /actuator/health
      metrics-path: /actuator/prometheus
    conjur-vault:
      url: ${CONJUR_VAULT_URL:http://localhost:8082}
      health-check-path: /health
      metrics-path: /metrics
    redis-cache:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
  alert-thresholds:
    security:
      auth-failure-warning-threshold: 0.05
      auth-failure-critical-threshold: 0.1
      unauthorized-attempts-warning-threshold: 5
      unauthorized-attempts-critical-threshold: 10
      token-validation-failure-warning-threshold: 0.05
      token-validation-failure-critical-threshold: 0.1
      credential-access-anomaly-warning-threshold: 2.0
      credential-access-anomaly-critical-threshold: 3.0
    performance:
      api-response-time-warning-threshold: 300
      api-response-time-critical-threshold: 500
      authentication-time-warning-threshold: 200
      authentication-time-critical-threshold: 400
      token-generation-time-warning-threshold: 100
      token-generation-time-critical-threshold: 200
      conjur-vault-response-time-warning-threshold: 150
      conjur-vault-response-time-critical-threshold: 300
    availability:
      api-availability-warning-threshold: 0.995
      api-availability-critical-threshold: 0.99
      conjur-vault-availability-warning-threshold: 0.999
      conjur-vault-availability-critical-threshold: 0.995
      redis-cache-availability-warning-threshold: 0.999
      redis-cache-availability-critical-threshold: 0.995
      database-availability-warning-threshold: 0.999
      database-availability-critical-threshold: 0.995

logging:
  level:
    root: INFO
    com.payment: INFO
    org.springframework: WARN
    com.payment.monitoring: INFO
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n'
    file: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n'
  file:
    name: ${LOG_FILE:logs/monitoring-service.log}
    max-size: 10MB
    max-history: 7